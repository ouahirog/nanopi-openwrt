name: Workflows test2

on:
  push:
    branches:
      - master     
#  watch:
#    types: started
   
env:
  SSH_ACTIONS: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build OpenWrt and release

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master    

#      - name: SSH connection to Actions
#        uses: P3TERX/debugger-action@master
#        if: env.SSH_ACTIONS == 'true'

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y --no-install-recommends install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib zip p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          curl https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh  | sed '/#/d' | sed 's/\\//g' | sed 's/exit 0//g' | sed 's/sudo apt -y install//g' | sed 's/sudo apt-get -y install//g' | sed 's/:i386//g' | xargs sudo apt-get -y --no-install-recommends install
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

      - name: SSH connection to Actions
        uses: P3TERX/debugger-action@master
        if: env.SSH_ACTIONS == 'true'

      - name: Prepare Files
        run: |
          mkdir ./friendlywrt-rk3328/
          mkdir ./friendlywrt-rk3328/bin/
          cd ./friendlywrt-rk3328/bin
          curl -O http://us.ouhai.com/r.img
          
      - name: Zip Files
        run: |
          gzip friendlywrt-rk3328/bin/*.img

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          pwd
          ls
          rm -rf ./artifact/
          mkdir -p ./artifact/
          mv friendlywrt-rk3328/bin/*img* ./artifact/
          zip -r artifact.zip ./artifact/
          release_tag="R2S-3328-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ouhai002 }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ouhai002 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
          asset_content_type: application/zip
